{"version":3,"sources":["Components/Header.js","Components/SideBar.js","Components/Post.js","Components/Content.js","Components/Body.js","Components/Footer.js","Components/Homepage.js","Components/CreatePost.js","App.js","serviceWorker.js","index.js"],"names":["Header","react_default","a","createElement","className","react_router_dom","to","Component","SideBar","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","headers","_this2","fetch","concat","userId","then","res","json","out","setState","map","header","postHeader","generateHeadings","getHeadings","Post","posts","post","id","postId","onClick","viewPost","postBody","postFooter","createPosts","Content","Components_Post","Body","ev","Components_Content","Components_SideBar","Input","type","placeholder","Button","text","Footer","Footer_Input","Footer_Button","Homepage","Components_Header","Components_Body","Components_Footer","CreatePost_Submit","savePost","Title","onChange","getTitle","PostBody","getBody","PostFooter","getFooter","Submit","CreatePost","body","title","footer","target","value","method","JSON","stringify","console","log","CreatePost_Header","bind","CreatePost_Title","CreatePost_PostBody","CreatePost_PostFooter","App","react_router","path","exact","component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.cd2121c7.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\n\nclass Header extends Component {\n  render() {\n    return (\n      <div className=\"header\">\n        <div className=\"left-section-header\">\n          <div className=\"newPost-btn\">\n            Â <Link to=\"/newPost\">Create New Post </Link>\n          </div>\n        </div>\n        <div className=\"right-section-header\">\n          <div className=\"login-btn\">Login</div>\n          <div className=\"signup-btn\">Signup</div>\n          <div className=\"search-btn\">Search</div>\n        </div>\n      </div>\n    );\n  }\n}\nexport default Header;\n","import React, { Component } from \"react\";\nimport \"../stylesheets/Homepage.css\";\n\nclass SideBar extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      headers: []\n    };\n  }\n  componentDidMount() {\n    fetch(`/getPostHeaders?userId=${this.props.userId}`)\n      .then(res => res.json())\n      .then(out => this.setState({ headers: out }));\n  }\n  generateHeadings() {\n    return this.state.headers.map(header => {\n      return <li>{header.postHeader}</li>;\n    });\n  }\n  getHeadings() {\n    return <ul>{this.generateHeadings()}</ul>;\n  }\n\n  render() {\n    return (\n      <div className=\"side-bar\">\n        <div className=\"Recent-posts\">{this.getHeadings()}</div>\n      </div>\n    );\n  }\n}\nexport default SideBar;\n","import React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport \"../stylesheets/Homepage.css\";\n\nclass Post extends Component {\n  createPosts(posts) {\n    return posts.map(post => {\n      return (\n        <div className=\"post\" id={post.postId} onClick={this.props.viewPost}>\n        <Link to=\"/viewPost\">\n            <div className=\"post-header\" id={post.postId}>\n              {post.postHeader}\n            </div>\n            <div className=\"post-body\" id={post.postId}>\n              {post.postBody}\n            </div>\n            <div className=\"post-footer\" id={post.postId}>\n              {post.postFooter}\n            </div>\n        </Link>\n          </div>\n      );\n    });\n  }\n  render() {\n    return this.createPosts(this.props.posts);\n  }\n}\nexport default Post;\n","import React, { Component } from \"react\";\nimport \"../stylesheets/Homepage.css\";\nimport Post from \"./Post.js\";\n\nclass Content extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      posts: []\n    };\n  }\n\n  componentDidMount() {\n    fetch(`/getPosts?userId=${this.props.userId}`)\n      .then(res => res.json())\n      .then(out => this.setState({ posts: out }));\n  }\n  render() {\n    return (\n      <div className=\"contents\">\n        <Post posts={this.state.posts} viewPost={this.props.viewPost} />\n      </div>\n    );\n  }\n}\nexport default Content;\n","import React, { Component } from \"react\";\n\nimport SideBar from \"./SideBar.js\";\nimport Content from \"./Content.js\";\nimport \"../stylesheets/Homepage.css\";\n\nclass Body extends Component {\n  viewPost(ev) {\n    fetch()\n  }\n  render() {\n    return (\n      <div className=\"body\">\n        <Content userId={this.props.userId} viewPost={this.viewPost} />{\" \"}\n        <SideBar userId={this.props.userId} />\n      </div>\n    );\n  }\n}\nexport default Body;\n","import React, { Component } from \"react\";\nimport \"../stylesheets/Footer.css\";\n\nclass Input extends Component {\n  render() {\n    return <input type=\"text\" placeholder={this.props.placeholder} />;\n  }\n}\nclass Button extends Component {\n  render() {\n    return <button className=\"newsletter-join-btn\">{this.props.text}</button>;\n  }\n}\n\nclass Footer extends Component {\n  render() {\n    return (\n      <div className=\"footer\">\n        <div className=\"join-newsletter\">\n          <label>Join our newsletters</label>\n          <Input placeholder=\"Enter your Email\" />\n          <Button text=\"Join\" />\n        </div>\n        <label className=\"label-powered\">powered by wordvoid</label>\n      </div>\n    );\n  }\n}\nexport default Footer;\n","import React, { Component } from \"react\";\nimport \"../stylesheets/Homepage.css\";\n\nimport Header from \"./Header.js\";\nimport Body from \"./Body.js\";\nimport Footer from \"./Footer.js\";\n\nclass Homepage extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      userId: 1\n    };\n  }\n  render() {\n    return (\n      <div>\n        <Header />\n        <Body userId={this.state.userId} />\n        <Footer />\n      </div>\n    );\n  }\n}\nexport default Homepage;\n","import React, { Component } from \"react\";\nimport \"../stylesheets/createNewPost.css\";\nimport { Link } from \"react-router-dom\";\n\nclass Header extends Component {\n  render() {\n    return (\n      <div className=\"new-post-header\">\n        <button>\n          <Link to=\"/\">Home </Link>\n        </button>\n        <Submit savePost={this.props.savePost} />\n      </div>\n    );\n  }\n}\n\nclass Title extends Component {\n  render() {\n    return (\n      <div>\n        {/* Title */}\n        <input\n          type=\"text\"\n          className=\"new-post-title\"\n          onChange={this.props.getTitle}\n          placeholder=\"Title\"\n        />\n      </div>\n    );\n  }\n}\n\nclass PostBody extends Component {\n  render() {\n    return (\n      <textarea\n        type=\"text\"\n        // value=\"Post\"\n        className=\"new-post-body\"\n        onChange={this.props.getBody}\n        placeholder=\"Body\"\n      />\n    );\n  }\n}\nclass PostFooter extends Component {\n  render() {\n    return (\n      <div>\n        {/* Footer */}\n        <input\n          type=\"text\"\n          className=\"new-post-footer\"\n          onChange={this.props.getFooter}\n          placeholder=\"Footer\"\n        />\n      </div>\n    );\n  }\n}\nclass Submit extends Component {\n  render() {\n    return (\n      <div>\n        <button className=\"submit-btn\" onClick={this.props.savePost}>\n          <Link to=\"/\">Publish Post</Link>\n        </button>\n      </div>\n    );\n  }\n}\nclass CreatePost extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      body: \"\",\n      title: \"\",\n      footer: \"\"\n    };\n  }\n  getBody(ev) {\n    this.setState({ body: ev.target.value });\n  }\n\n  getTitle(ev) {\n    this.setState({ title: ev.target.value });\n  }\n\n  getFooter(ev) {\n    this.setState({ footer: ev.target.value });\n  }\n\n  savePost() {\n    fetch(`/addPost?userId=1`, {\n      method: \"post\",\n      body: JSON.stringify({\n        title: this.state.title,\n        body: this.state.body,\n        footer: this.state.footer\n      })\n    })\n      .then(res => res.text())\n      .then(out => console.log(\"out is\", out));\n  }\n  render() {\n    return (\n      <div className=\"createNewPost\">\n        <Header savePost={this.savePost.bind(this)} />\n        <div className=\"newPost\">\n          <Title getTitle={this.getTitle.bind(this)} />\n          <PostBody getBody={this.getBody.bind(this)} />\n          <PostFooter getFooter={this.getFooter.bind(this)} />\n        </div>\n      </div>\n    );\n  }\n}\nexport default CreatePost;\n","import React, { Component } from \"react\";\nimport Homepage from \"./Components/Homepage.js\";\nimport CreatePost from \"./Components/CreatePost.js\";\n\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\n\nclass App extends Component {\n  render() {\n    return (\n      <Router>\n        <Route path=\"/\" exact component={Homepage} />\n        <Route path=\"/newPost\" component={CreatePost} />\n      </Router>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./stylesheets/index.css\";\nimport App from \"./App.js\";\n\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}